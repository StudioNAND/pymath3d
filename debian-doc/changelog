1.3
----
Major overhaul on norms and distance measures.
Some clarification and breaking of ambiguities in constructors.
Rotation vector conversions for Orientation and Quaternion.

1.2:
----
Headers with GPL.
Minor changes.

1.1-7:
------
Corrected print, raise, exception, types changes for compatibility with Python 3.x.

1.1-6:
------
Bugfix in build script that made the gzipped tar archive lack the interpolation module.
Transform now use more efficient array as replacement for Orientation and Vector components.

1.1-5:
------
Fixed some coercion rules for complying with Python 2.6.

1.1-4:
------
Revised constructor system. Now supports class method for querying whether
some data can be used for constructing the object. Also some minor
constructor related bug fixes and tidying.

1.1-3:
------
Corrected spelling ("arg" -> "args") in constructor for Transform.

1.1-2:
------
Corrected a numerical instability in the quaternion power function. Now a
check is done for the quaternion being close to the identity. If so, it is
forced to identity.

1.1-1:
------
Conjugation and multiplication of quaternions in the SO(3) led to
numerical errors which turned the quaternions out of normalisation. This
again led to errors in the exponentiation by the time parameter on the
trajectory, resulting in math domain errors. This was fixed by normalisation.

1.1:
------
The Quaternion class now have negation and distance methods. This is used
in SE3Interpolation and SO3Interpolation to optionally selecting the
shortest (the default) rotation path, if the optional constructor
parameter 'shortest' evaluates to true. If false, it is indetermined which
of the longer or shorter paths will be followed.

1.0-4:
------
Important bugfix: Correction of numerical constant in toOrientation method.

1.0-3:
------
Important bugfix: Update to more robust quaternion from orientation method
proved to be slightly less robust than announced. Now a
modification based on the code from
http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
has been used.

1.0-2:
------
Robust method used for computing quaternions from orientation
matrices. The method is described in the article:
http://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation

1.0-1:
------
Simple bug in dependency of the math3d package. There is now code that
requires python 2.5 or higher.

1.0:
------
* Quaternion has been added as a new basic 3D object.
* Interpolation modules added in "interpolation" package. These comprise
  usage of quaternions in SLERP to obtain orientational interpolation in
  SO3Interpolator. R3Interpolator is the simple direct interpolation
  between two points in space. SE3Interpolator is the combination of
  the orientation and position interpolators. 
* All main objects (Vector, Transform, Orientation) are now based on
  "object". No functionality utilizes this as of yet.
	
0.1-11:
------
* Distinguish in-place rotations of Orientations between base or
transformed reference. 
* Added exception thrown when not finding attributes for Vector
and Orientation.

0.1-10:
------
* More efficient rot{X,Y,Z} on orientations.
* New methods for in-place rotation of orientations: rotate, rotate{X,Y,Z}.

0.1-9:
------
* New factory methods newOrientationRotX and newOrientationRotY

0.1-8:
------
* Added a member (_isPosition) and method (isPos) in Vector to
distinguish between vector and position vector. the _isPosition is set
in Vector.__init__, as per the keyword argument "position". Transform
now takes into account if the transformee is a vector or a position vector.

0.1-7:
------
* Added __deepcopy__ methods for the Vector, Orientation and
Transform. These are the same as __copy__ but needed when somewhere else a
deepcopy is cascaded down.

0.1-6:
------
* Added __str__ method to all classes, so they can be "print"'ed.
* Moved to numpy entirely, removing all use of Numeric. This had some type
impact, but most severely you cannot right multiply a numpy scalar on any
of the objects, since it takes the multiplication. This may be fixed by
using new style classes in the future.. 

0.1-5:
------
* Added copy methods to Vector, Orientation, and Transform classes. Each
class have now a copy(self,other) for getting the data from other object,
and a __copy__(self) method for use by the copy function in the copy
module. There are NO type checking yet!

0.1-4:
------
Corrected serious sign error in Vector.angle in vector.py.

0.1-3:
------
Added a signed angle method in vector.py.
